[{"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\index.js":"1","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\App.js":"2","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\BuildSliders.js":"3","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\Slider.js":"4","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\SurfComponent.js":"5","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\ShiftButtons.js":"6","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\UpdateDownloadButtons.js":"7","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\ThreeDWorld.js":"8","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\InfoWaitModal.js":"9","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\GitHubReference.js":"10"},{"size":205,"mtime":1608475042481,"results":"11","hashOfConfig":"12"},{"size":6665,"mtime":1608821872297,"results":"13","hashOfConfig":"12"},{"size":1118,"mtime":1608054274182,"results":"14","hashOfConfig":"12"},{"size":1322,"mtime":1608821471274,"results":"15","hashOfConfig":"12"},{"size":21006,"mtime":1608821151129,"results":"16","hashOfConfig":"12"},{"size":1270,"mtime":1608669909967,"results":"17","hashOfConfig":"12"},{"size":3016,"mtime":1608821407911,"results":"18","hashOfConfig":"12"},{"size":6047,"mtime":1608742585704,"results":"19","hashOfConfig":"12"},{"size":892,"mtime":1608730143987,"results":"20","hashOfConfig":"12"},{"size":492,"mtime":1608678518090,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"w49f2e",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\index.js",[],["45","46"],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\App.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\BuildSliders.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\Slider.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\SurfComponent.js",["47"],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\ShiftButtons.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\UpdateDownloadButtons.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\ThreeDWorld.js",["48"],"import React, { Suspense, useState, useEffect, useRef } from 'react';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { softShadows, OrbitControls, MeshWobbleMaterial, Stars } from 'drei';\r\nimport { Canvas, useFrame } from 'react-three-fiber';\r\nimport SurfComponent from './SurfComponent';\r\nimport { useSpring, animated } from 'react-spring/three';\r\nimport * as THREE from 'three/src/Three';\r\n\r\nsoftShadows();\r\n\r\nconst Lights = () => {\r\n    return (\r\n        <>\r\n            <ambientLight intensity={0.3} />\r\n            {/* Galaxy light */}\r\n            <spotLight intensity={1} position={[200, 200, 0]} castShadow/>\r\n            {/* Showcase light from  front */}\r\n            <pointLight intensity={2} position={[0, 3, 1.5]} distance={4} decay={1}/>\r\n            {/* Showcase light from  behind */}\r\n            <pointLight intensity={2} position={[0, 3, -1.5]} distance={5} decay={1}/>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Island = () => {\r\n    const island = useRef();\r\n    return (\r\n        <mesh ref={island} rotation={[-Math.PI / 2, 0, 0]} position={[0, -14, 0]}>\r\n            <sphereBufferGeometry attach=\"geometry\" args={[14.5, 32, 32]} />\r\n            <meshStandardMaterial attach=\"material\" color=\"yellow\" />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nconst SeaPlanet = () => {\r\n    const seaPlanet = useRef();\r\n    return (\r\n        <mesh ref={seaPlanet} rotation={[-Math.PI / 2, 0, 0]} position={[0, -100, 0]}>\r\n            <sphereBufferGeometry attach=\"geometry\" args={[99, 64, 64]} />\r\n            <MeshWobbleMaterial color=\"#4372a4\" speed={0.5} factor={0.5} />\r\n        </mesh>\r\n    )\r\n};\r\n\r\nconst PalmTree = () => {\r\n\r\n    const palmTreeUrl = process.env.PUBLIC_URL + \"/scene.gltf\";\r\n\r\n    const [palmTree, setPalmTree] = useState(() => {\r\n        return null;\r\n    });\r\n\r\n    useEffect(() => {\r\n        new GLTFLoader().load(palmTreeUrl, gltf => {\r\n            setPalmTree(gltf.scene);\r\n        });\r\n    }, [palmTreeUrl]);\r\n\r\n    return (\r\n        palmTree ? <primitive object={palmTree} position={[-5, -2, -3]} /> : null\r\n    )\r\n};\r\n\r\nconst LoadingComet = (isLoadingUpdatedSurf) => {\r\n    const mesh = useRef(null);\r\n\r\n    useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y -= 0.02))\r\n\r\n    let drivingValue = isLoadingUpdatedSurf.isLoadingUpdatedSurf;\r\n\r\n    const { rotationComet, scaleComet, positionComet } = useSpring({\r\n        scaleComet: drivingValue ? [3, 3, 3] : [0.1, 0.1, 0.1],\r\n        rotationComet: drivingValue ? [0, THREE.Math.degToRad(360), THREE.Math.degToRad(270)] : [0, 0, 0],\r\n        positionComet: drivingValue ? [0, 7, 0] : [0, 10, 0],\r\n        config: { mass: 10, tension: 100, friction: 30 }\r\n    });\r\n\r\n    return (\r\n        <animated.mesh ref={mesh} position={positionComet} scale={scaleComet} rotation={rotationComet} >\r\n            <animated.meshStandardMaterial  color={\"#21f500\"}/>\r\n            <boxBufferGeometry attach=\"geometry\" args={[0.5, 0.5, 0.5]}  />\r\n        </animated.mesh>\r\n    )\r\n};\r\n\r\nconst ThreeDWorld = (props) => {\r\n\r\n    // UseStates (run only on start)\r\n\r\n    const [firstSurfPos, setFirstSurfPos] = useState(() => {\r\n        return [props.positions[0]];\r\n    });\r\n\r\n    const [secondSurfPos, setSecondPos] = useState(() => {\r\n        return [props.positions[1]];\r\n    });\r\n\r\n    const [thirdSurfPos, setThirdPos] = useState(() => {\r\n        return [props.positions[2]];\r\n    });\r\n\r\n    // UseStates (run all the time)\r\n\r\n    const [firstSurfGltf, setfirstGltf] = useState(props.gltfData[0].data3D);\r\n\r\n    const [secondSurfGltf, setSecondGltf] = useState(props.gltfData[1].data3D);\r\n\r\n    const [thirdSurfGltf, setThirdGltf] = useState(props.gltfData[2].data3D);\r\n\r\n    const [shiftSurfs, setShiftSurfs] = useState(false);\r\n\r\n    const [updateSurf, setUpdateSurf] = useState(false);\r\n\r\n    // UseSprings\r\n\r\n    const { posSurfOne, posSurfTwo, posSurfThree } = useSpring({\r\n        posSurfOne: shiftSurfs ? firstSurfPos[1] : firstSurfPos[0],\r\n        posSurfTwo: shiftSurfs ? secondSurfPos[1] : secondSurfPos[0],\r\n        posSurfThree: shiftSurfs ? thirdSurfPos[1] : thirdSurfPos[0],\r\n        config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 }\r\n    });\r\n\r\n    // UseEffects\r\n\r\n    useEffect(() => {\r\n        setUpdateSurf(true);\r\n        setfirstGltf(props.gltfData[0].data3D);\r\n        setSecondGltf(props.gltfData[1].data3D);\r\n        setThirdGltf(props.gltfData[2].data3D);\r\n        setUpdateSurf(false);\r\n    }, [props.gltfData]);\r\n\r\n    useEffect(() => {\r\n        setShiftSurfs(true);\r\n        setFirstSurfPos((prevPos) => [props.positions[0], prevPos[0]]);\r\n        setSecondPos((prevPos) => [props.positions[1], prevPos[0]]);\r\n        setThirdPos((prevPos) => [props.positions[2], prevPos[0]]);\r\n        setShiftSurfs(false);\r\n    }, [props]);\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <Canvas concurrent\r\n                colorManagement\r\n                shadowMap\r\n                camera={{ position: [0, 15, 35], fov: 50 }} >\r\n                <OrbitControls\r\n                    enablePan={false}\r\n                    target={[0, 2, 0]}\r\n                    enableDamping={true}\r\n                    minPolarAngle={Math.PI / 4}\r\n                    maxPolarAngle={Math.PI / 2}\r\n                    minDistance={3}\r\n                    maxDistance={400}\r\n\r\n                />\r\n                <Lights />\r\n                <SeaPlanet />\r\n                <Island />\r\n                <Suspense fallback={null}>\r\n                    <PalmTree />\r\n                </Suspense>\r\n                <LoadingComet isLoadingUpdatedSurf={props.isLoadingUpdatedSurf} />\r\n                <Suspense fallback={null}>\r\n                    <SurfComponent position={posSurfOne} gltfData={firstSurfGltf} />\r\n                    <SurfComponent position={posSurfTwo} gltfData={secondSurfGltf} />\r\n                    <SurfComponent position={posSurfThree} gltfData={thirdSurfGltf} />\r\n                </Suspense>\r\n                <Stars />\r\n            </Canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreeDWorld;\r\n\r\n","C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\InfoWaitModal.js",[],"C:\\Users\\user\\Desktop\\CODING\\MojeProjekty\\surfboardProject\\surf-shaper\\client\\src\\components\\GitHubReference.js",["49"],"import React from 'react';\r\n\r\nconst githubIcon = process.env.PUBLIC_URL + \"/githubIcon.png\";\r\n\r\nconst GitHubReference = () => {\r\n\r\n    const navigateToGitHub = () => { \r\n        const win = window.open(\"https://github.com/Jurajzovinec/Surf-Shaper\", '_blank');\r\n        win.focus();\r\n    };\r\n\r\n    return (\r\n        <div className=\"git-hub-ref\">\r\n            <img src={githubIcon} className=\"git-img\" onClick={navigateToGitHub} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GitHubReference;\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":31,"column":8,"nodeType":"56","endLine":31,"endColumn":16,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":112,"column":12,"nodeType":"60","messageId":"61","endLine":112,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":14,"column":13,"nodeType":"64","endLine":14,"endColumn":84},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialize'. Either include it or remove the dependency array. You can also do a functional update 'setInitialize(i => ...)' if you only need 'initialize' in the 'setInitialize' call.","ArrayExpression",["67"],"no-unused-vars","'updateSurf' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [buffer, initialize]",{"range":"70","text":"71"},[1021,1029],"[buffer, initialize]"]